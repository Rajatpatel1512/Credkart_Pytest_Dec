{"name": "TC_004 : CredKart_User_Login_Excel_DDT", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [WinError 2] The system cannot find the file specified", "trace": "self = <testCases.test_CredKart_User_login_Excel_DDT_002.Test_User_Login_Excel_DDT_Class_002 object at 0x0000024F02D4F9D0>\n\n    @allure.description(\"CredKart login Test\")\n    @allure.title(\"TC_004 : CredKart_User_Login_Excel_DDT\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.story(\"Story : Week4\")\n    @allure.epic(\"Epic : 1nd level\")\n    @pytest.mark.regression\n    @pytest.mark.group1\n    @pytest.mark.flaky(reruns=0, reruns_delay=2)\n    def test_CredKart_User_Login_Excel_DDT_004(self):\n        self.log.info(\"Testcase test_CredKart_User_Login_Excel_DDT_004 is started\")\n        \"\"\"Test verify_user_login method with valid credentials.\"\"\"\n        self.log.info(\"Opening Browser\")\n        self.lp = Login_Page_Class(self.driver)\n        self.driver.get(self.login_url)\n        self.log.info(f\"Going to CredKart URL ->{self.login_url}\")\n        # Read data from Excel\n        self.log.info(\"Reading data from Excel\")\n        self.log.info(\"Reading the number of rows from Excel\")\n        excel_row_count = XLutils.RowCount(self.Excel_File_Path, \"CredKart_login_Data\")\n        print(f\"Number of rows in Excel is :  {excel_row_count}\")\n        self.log.info(f\"Number of rows in Excel is :  {excel_row_count}\")\n        Result_List=[]\n        for i in range(2, excel_row_count + 1):\n            self.log.info(f\"Reading data from row number : {i} in excel\")\n            self.email = XLutils.ReadData(self.Excel_File_Path, \"CredKart_login_Data\", i, 1)\n            self.password = XLutils.ReadData(self.Excel_File_Path, \"CredKart_login_Data\", i, 2)\n            self.expected_result = XLutils.ReadData(self.Excel_File_Path, \"CredKart_login_Data\", i, 3)\n    \n            self.log.info(f\"Entering email :{self.email}\")\n            self.lp.Enter_Email(self.email)\n            self.log.info(f\"Entering password :{self.password}\")\n            self.lp.Enter_Password(self.password)\n            self.log.info(\"Clicking Login button\")\n            self.lp.Click_submit_Button()\n            self.log.info(\"Verify User is logged in or not\")\n            if self.lp.verify_user_Login_or_registration() == \"pass\":\n                actual_result = \"login_pass\"\n                self.log.info(f\"User '{self.email}' is  logged in and actual result is : {actual_result}\")\n                self.log.info(\"Taking Screenshot for Pass\")\n                self.driver.save_screenshot(f\".\\\\Screenshots\\\\test_CredKart_User_Login_Excel_DDT_004_{self.email}_pass.png\")\n>               allure.attach.file(\".\\\\Screenshots\\\\test_CredKart_User_Login_Excel_DDT_004.png\",\n                                   name=\"test_CredKart_User_Login_Excel_DDT_004.png\",\n                                   attachment_type=allure.attachment_type.PNG\n                                   )\n\ntestCases\\test_CredKart_User_login_Excel_DDT_002.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\allure_commons\\_allure.py:203: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n.venv\\Lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n.venv\\Lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n.venv\\Lib\\site-packages\\allure_pytest\\listener.py:256: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\n.venv\\Lib\\site-packages\\allure_commons\\reporter.py:160: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\n.venv\\Lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n.venv\\Lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n.venv\\Lib\\site-packages\\allure_commons\\logger.py:39: in report_attached_file\n    shutil.copy2(source, destination)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = '.\\\\Screenshots\\\\test_CredKart_User_Login_Excel_DDT_004.png'\ndst = WindowsPath('C:/RAJAT/CREDENCE/CT20_Practical/Automation/Credkart_Pytest_Dec/AllureReport1/12523c9f-9395-409e-ae47-bafcbdc00564-attachment.png')\n\n    def copy2(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data and metadata. Return the file's destination.\n    \n        Metadata is copied with copystat(). Please see the copystat function\n        for more information.\n    \n        The destination may be a directory.\n    \n        If follow_symlinks is false, symlinks won't be followed. This\n        resembles GNU's \"cp -P src dst\".\n        \"\"\"\n        if os.path.isdir(dst):\n            dst = os.path.join(dst, os.path.basename(src))\n    \n        if hasattr(_winapi, \"CopyFile2\"):\n            src_ = os.fsdecode(src)\n            dst_ = os.fsdecode(dst)\n            flags = _winapi.COPY_FILE_ALLOW_DECRYPTED_DESTINATION # for compat\n            if not follow_symlinks:\n                flags |= _winapi.COPY_FILE_COPY_SYMLINK\n            try:\n>               _winapi.CopyFile2(src_, dst_, flags)\nE               FileNotFoundError: [WinError 2] The system cannot find the file specified\n\nC:\\Users\\ankush gupta\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\shutil.py:453: FileNotFoundError"}, "description": "CredKart login Test", "attachments": [{"name": "test_CredKart_User_Login_Excel_DDT_004.png", "source": "12523c9f-9395-409e-ae47-bafcbdc00564-attachment.png", "type": "image/png"}, {"name": "log", "source": "34d78880-a6fc-4120-a09b-e7c02f54ea6d-attachment.txt", "type": "text/plain"}], "start": 1733740581868, "stop": 1733740598354, "uuid": "59e9a7f9-a0ae-4df6-90a5-3c0e188910c8", "historyId": "c3ab112632db288aad7e4db19231acc9", "testCaseId": "c3ab112632db288aad7e4db19231acc9", "fullName": "testCases.test_CredKart_User_login_Excel_DDT_002.Test_User_Login_Excel_DDT_Class_002#test_CredKart_User_Login_Excel_DDT_004", "labels": [{"name": "story", "value": "Story : Week4"}, {"name": "severity", "value": "critical"}, {"name": "epic", "value": "Epic : 1nd level"}, {"name": "tag", "value": "flaky(reruns=0, reruns_delay=2)"}, {"name": "tag", "value": "group1"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "@pytest.mark.usefixtures('driver_setup')"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_CredKart_User_login_Excel_DDT_002"}, {"name": "subSuite", "value": "Test_User_Login_Excel_DDT_Class_002"}, {"name": "host", "value": "DESKTOP-2VD0KBH"}, {"name": "thread", "value": "1364-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_CredKart_User_login_Excel_DDT_002"}]}